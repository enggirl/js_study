预解析：程序在执行之前，会把所有变量的定义（仅仅是定义），拿到前面

	不会改变作用域（函数，依然是局部的）

	预解析：不能离开作用域
		不能离开script标签


存在的价值：性能

---------------------------------------------------------------------------------------

大问题->很多小问题
递归：

兔子――
3个月成熟，每个月下一对儿小兔子

1月		1对
2月		1对
3月		2对(1老+1小)
4月		3对(1老+2小)
5月		5对(2老+3小)
6月		8
7月		13
8月		21

1 1 2 3 5 8 13 21

f(n)=f(n-1)+f(n-2);


1500W	1.5亿

---------------------------------------------------------------------------------------

黄金分割――
0.618:1
1:1.618

---------------------------------------------------------------------------------------

垃圾回收：
有些对象，已经不用了，回收他所占的内存――自动

标准：

生存周期（有效期）：
局部变量――到函数执行结束为止
闭包：里面的函数还能访问，外面的局部变量不能回收
全局变量――到页面关闭为止

function show()
{
	var a=xx;
	var b=??;

	document.onclick=function ()
	{
		alert(a);
	};
}

show();

//不能回收a

document.onclick=null;

//a变成可以回收









arr=[12,5,8];


function show()
{
	var arr=[1,3,8];
}

//执行前――不存在arr

show();		//执行中――分配空间，创建arr

//执行后――arr可以回收

---------------------------------------------------------------------------------------

//var a=9;

function xxx()
{
	//var a=12;

	function ///()
	{
		//var a=5;

		document.onclick=function ()
		{
			//
			//var a=8;

			alert(a);
		};
	}
}

作用域链：父函数把自己的作用域传给子函数，子函数，也会自动往下传

闭包：有一个函数没有释放，从他开始，作用域链上所有的父级，局部变量，都不会释放

---------------------------------------------------------------------------------------

异常：报错

异常――有些错误程序本身处理不了

try
{
	有可能出错的代码
}
catch(e)		捕捉
{
	补救的代码
}

---------------------------------------------------------------------------------------

用途：
1.应急
2.测试代码

缺点：
1.不便于调试
2.性能低

try
{
	
}

---------------------------------------------------------------------------------------

1.稳定性
2.扩展性
3.性能――

优化：
网络性能
执行性能

---------------------------------------------------------------------------------------

网络性能
工具――
1.F12 的 network		缺点：需要比较多的经验
2.YSlow 干活 & 学习
	现状firebug

---------------------------------------------------------------------------------------

connecting时间特别长――
1.客户端网速不行――
2.服务器负载过重

waiting
服务器负载过重：
	1.优化服务端程序
	2.$$$

receiving
1.客户端网速不行――排除
2.数据太大――看看数据量
3.服务器出口带宽不够

---------------------------------------------------------------------------------------

方法：
1.减少请求
大小相同――请求少，占用资源少
1文件	1连接+1请求+1接收
100文件	100连接+100+100

最小体积

270*100		≈ 26K
		   400K

2.能合并――都合并后

3.能压缩――都压缩

4.js阻塞加载
	并行加载――同时加载多个文件

	在JS文件加载完之前，其他的东西都得停

	加载js文件（script标签）->预解析->执行js->继续加载其他


	js文件一定要合并
	别人的js
	1.最好存下来
	2.放到body最下面――就算卡了，页面加载不受影响

5.CDN――Content Delivery Network（内容分发网络）
	速度快
	降低主机房的压力

---------------------------------------------------------------------------------------

执行性能：
1.不用的东西，立刻删掉	*
2.全局变量不要用
3.尽量用系统函数		*
4.尽量用正则

---------------------------------------------------------------------------------------













