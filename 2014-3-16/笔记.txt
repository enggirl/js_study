jquery

预解析：声明提到作用域、script前面
	变量、函数

if()
{
	function show()
}

------------------------------------------------------------------------------------------------

javascript――问题

with	乱

严格模式：
1.禁止没有var，直接赋值		好事
2.禁止if定义函数		好事
3.禁用with			好事
4.？

严格模式也有作用域：
全局――所有代码开启
函数――函数内部代码开启
只对当前script作用

每个文件，都得加strict

------------------------------------------------------------------------------------------------

递归：

------------------------------------------------------------------------------------------------

垃圾回收：内存

生存周期：
1.局部――函数结束
2.闭包――里面的函数消失
3.全局――页面关闭

------------------------------------------------------------------------------------------------

网络：
1.工具	YSlow
2.方法
	请求数
	合并
	压缩
	js阻塞――别人的js
	cdn

执行――习惯：
1.用过的东西――赶紧删（标签、对象、方法、事件、。。。）
2.不用全局
3.原生方法
4.正则

------------------------------------------------------------------------------------------------

优化――让程序少做事，让程序员多做事
------------------------------------------------------------------------------------------------

验证性能的方法：设置开始结束时间点，然后循环比较时间差长度
	
	var start=new Date().getTime();
	
	for(var i=0;i<1000000;i++)
	{
		oDiv.style.background='red';		//7900000   3500000
		//a='red';				//2200      1200
	}
	
	alert(new Date().getTime()-start);		//约4000倍   约3000倍

------------------------------------------------------------------------------------------------


真的好使：
1.DOM操作――特别慢
	比普通操作慢	4000倍左右

	少用DOM操作――运动
	建议：
		有些运动――用户看不到、不明显（暂停）

2.图片――多、大	特别影响性能

	1.尽量少用图片――建议

	2.尽量小（尺寸、文件大小）

	3.尽量不要拉伸、压缩――因为图片是由像素点组成，所以如果压缩，计算机会需要重新计算1*1需要几个像素点
	
	4.平铺――切大点――因为如果图片1*10，要平铺到w:800的区域，需要计算800次，而如果10*10，只需要计算80次，而他们的大小一样

	5.出了可视区――删了

for――<length；for in

	for in比普通for――慢250倍

------------------------------------------------------------------------------------------------

说说就完：

1.变量――
全局		×

结论1.局部变量>全局变量
结论2.window.a比a慢――属性越多，东西越慢――因为window要遍历所有属性，从中找a属性，所以慢

属性越多，对象越慢

a	?	window.a

作用域链：往上找

------------------------------------------------------------------------------------------------

属性<变量

先把length存起来，然后再循环	2%

var len=arr.length;

for(var i=0;i<len;i++)
{
	
}

------------------------------------------------------------------------------------------------

parseInt		1.字符串->数字
			2.小数->整数

正数

------------------------------------------------------------------------------------------------

var str='';

str=str+'asfasewrwr';
str+='asfasewrwr';
str+='asfasewrwr';
str+='asfasewrwr';
str+='asfasewrwr';


看似可行――反而破坏了浏览器优化――性能降低
var arr=[];

arr.push('asfasewrwr');
arr.push('asfasewrwr');
arr.push('asfasewrwr');
arr.push('asfasewrwr');
arr.push('asfasewrwr');

str=arr.join('');

------------------------------------------------------------------------------------------------

面向对象：

对象：黑盒子――看不见里面的东西
	不用管里面怎么实现，管怎么用

	Date.getFullYear

	createElement

------------------------------------------------------------------------------------------------

面向对象――负责用，怎么写不用关心

用对象的人――过去	方便
写对象的人――现在	$$$

------------------------------------------------------------------------------------------------

对象组成：       只要是对象，就可以为他添加属性和方法
1.属性
2.方法

	var arr=[1,2,3];

	arr.length
	arr.push();

	var str='asdfasf';

	str.length
	str.substring();

变量、属性――差不多           唯一区别就是变量是自由的，不属于任何人，而属性是属于某个对象的

函数、方法――同理差不多

然而他们之间的界限有时候很模糊，比如一个全局变量和全局函数，而他们是属于window对象的，所以他们是
window对象的属性和方法

------------------------------------------------------------------------------------------------

this――发生事件的对象
	拥有人――当前的方法属于谁，this就是谁

this――window

严格模式：      开启严格模式，修正闭包函数的this指向？
4.修正this		函数

------------------------------------------------------------------------------------------------

this永远只管一层

------------------------------------------------------------------------------------------------

属性：	变量
方法：	函数

this――方法所属的对象

------------------------------------------------------------------------------------------------

JS的对象：随便添加属性、方法

面向对象应用：思想

------------------------------------------------------------------------------------------------

微博的人：
	属性：名字、地区、粉丝数、。。。
	方法：关注()、私信()、举报()

------------------------------------------------------------------------------------------------

Date		时间、日期
Array		排序、拿


Object		没有功能

问题：
1.new――到底是啥？
2.每个对象都有一套自己的方法（功能一样――浪费资源）

var oDate=new Date();
var re=new RegExp();
var obj=new Object();


new 函数()

new的作用：
1.this指向一个新建的空对象
2.return this

------------------------------------------------------------------------------------------------

css

class	给一组东西加样式			给一个东西加样式	行间样式

.box {background:red;}

<div class="box"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>
<div class="box"></div>

------------------------------------------------------------------------------------------------

类		Array		图纸、工厂――功能：创建对象
对象(实例)	arr		产品――实际功能

var arr=new Array();

Array.push(5);

JS的面向对象――不完整
类 ≈ 构造函数

------------------------------------------------------------------------------------------------

原型――用途：扩展系统对象的功能


同一个类的对象――	方法都一样
			属性各不相同

------------------------------------------------------------------------------------------------

继承――把父级的东西拿过来；父级有的东西，子级也有；给父级加东西，子级也会有

JS也有继承

------------------------------------------------------------------------------------------------

判断详细类型：
1.instanceof		直接类+父类+父父类...
2.constructor		直接类

------------------------------------------------------------------------------------------------

任何东西来自于object

arr1->Array->Object->Function

arr1->Function			×

------------------------------------------------------------------------------------------------

this――乱
1.由调用决定――看见调用，再说this

------------------------------------------------------------------------------------------------

css优先级：
行间>ID>class>标签>*

1.this优先级：
高	new		new出来的空object
	定时器		window
	事件		发生事件的元素
	方法		所有者
低	其他		window||undefined

2.this一层


定时器：this指向window的原因
每隔一段时间，由window 执行一次函数

------------------------------------------------------------------------------------------------

面向对象：
1.超大程序
2.游戏

------------------------------------------------------------------------------------------------

面向对象的选项卡：改

面向过程――函数+函数+。。。
面向对象――对象+对象+。。。

------------------------------------------------------------------------------------------------

改：
1.onload=>构造函数
	window.onload			初始化程序
	构造函数			初始化对象
2.去掉函数嵌套
	*可以有全局变量――临时
3.函数->方法
  全局变量->属性

4.改错

------------------------------------------------------------------------------------------------

面向对象：
小程序里――撑的

替代方案：
模块化开发

------------------------------------------------------------------------------------------------

jQuery――
写一个jQuery

库：jQuery、YUI、motools、Prototype、EXT、kissy、angular、tangram

------------------------------------------------------------------------------------------------

写一个jQuery

$('#div1 ul li.box')

li.box

------------------------------------------------------------------------------------------------

DOM方法选出来的元素――不是数组
getElementsByTagName
getElementsByClassName
getElementsByName
children













