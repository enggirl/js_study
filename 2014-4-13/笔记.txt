继承：
1.继承父级的属性
2.继承父级的方法

避免冲突、防止重名：
1.封闭空间		方便		太封闭了
2.命名空间		严谨		太麻烦，东西太多
3.模块化			方便、简单	比较通用
4.面向对象		没有好处		太麻烦、太容易出错


xxx.fe.ue.zf.common.aaa()

---------------------------------------------------------------

seajs
MVC

---------------------------------------------------------------

common:
	jsonp
	class
	add

用户：
	注册
	登录
	退出登录
	获取用户列表

留言：
	发言
	完整获取
	获取更新

---------------------------------------------------------------

nodeJS――用JavaScript写后台

后台：
php
asp
jsp

nodejs优势：
性能		比PHP高 86倍
语法跟前台js一模一样――学习成本低；模块通用
结合平滑

nodejs劣势：
1.对程序员的要求比PHP高――$
2.现成的东西缺――文档、源码、框架
3.缺乏托管环境――阿里云


200	400万
3	6万

nodeJS	1s
PHP	86s	1分半

webkit内核

---------------------------------------------------------------

http://nodejs.org/

---------------------------------------------------------------

运行nodeJS程序：
1.切换盘符	d:
2.进入目录	cd 目录名
3.运行程序	node 文件名.js

*cls		清屏

---------------------------------------------------------------

nodeJS有两个对象用不了：
document
window

nodeJS有，前台没有：
1.文件操作
2.数据库操作
3.网络操作

---------------------------------------------------------------

服务器

http协议：约定

浏览器		服务器
FF		apache
webkit		nginx
IE		iis

---------------------------------------------------------------

端口

不同的服务――通过端口号区分

web	80
ftp	21/22
pop3	110
迅雷	12345

---------------------------------------------------------------

E ADDR IN USE
  地址 正在使用

baidu.com:8080

---------------------------------------------------------------

http
fs

---------------------------------------------------------------

同步：一次只能做一个
异步：同时做多个事

nodeJS所有的操作全是异步操作――性能

---------------------------------------------------------------

系统模块：http、fs

---------------------------------------------------------------

mysql

npm	nodejs package manager

npm install mysql

mysql客户端+服务端

---------------------------------------------------------------

PHP		node
1.连接		1.连接+选择库
2.选择库
3.查询sql
4.获取结果

---------------------------------------------------------------

用户注册、登录――接口：
/user?act=reg/login&user=名字&pass=密码
{err: 1, msg: '登录失败'}

---------------------------------------------------------------

$_GET	$_POST

get：比较小
post：可以很大

get――		一次到达
post――		分多次到达

nodeJS没有前台的（用户操作）事件
nodeJS有自己的事件

---------------------------------------------------------------

post异步――
文件异步――

---------------------------------------------------------------

用户注册、登录――接口：
/user?act=reg/login&user=名字&pass=密码
{err: 1, msg: '登录失败'}

用户名：6-24位、英文数字、下划线

---------------------------------------------------------------

LIMIT 起点,个数

10张

1页	LIMIT 0,10
2页	LIMIT 10,10
3页	LIMIT 20,10

n页	LIMIT (n-1)*10,10

---------------------------------------------------------------

瀑布流
/flow?page=1


stringify		串行化、持久化、序列化
对象->字符串

{'a': 12, 'b': 5}

---------------------------------------------------------------

原始wh		现在w
800*450		300*?

原始w/原始h=现在w/?

?=现在w*原始h/原始w

---------------------------------------------------------------

对象化组件：











