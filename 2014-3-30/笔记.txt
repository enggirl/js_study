replace(找, 换成)

replace('字符串'|正则, '字符串'|函数)





indexOf	不行
search	re

match	re

split	字符串|re

replace	字符串|re

------------------------------------------------------------------------------------------------

li#li1
#li1

------------------------------------------------------------------------------------------------

call/apply
this

高	new	call
	定时器
	事件
	方法
低	其他

------------------------------------------------------------------------------------------------

getAtribute/setAttribute

------------------------------------------------------------------------------------------------

继承：	父级有的东西，子级也有
	如果给父级加东西，子级也会有

------------------------------------------------------------------------------------------------

自己写继承

对象组成：属性+方法
继承：
1.父级的属性		父级构造函数
2.父级的方法		父级的原型

------------------------------------------------------------------------------------------------

属性：	构造函数
方法：	原型

------------------------------------------------------------------------------------------------

var arr1=[1,2,3];
var arr2=arr1;

arr2.xxx
arr1

------------------------------------------------------------------------------------------------

继承：
1.继承父级的属性
2.添加子级的属性

3.继承父级的方法
4.添加子级的方法

------------------------------------------------------------------------------------------------

function show(a)
{
	alert(a);
}

new show();

------------------------------------------------------------------------------------------------

继承：
1.父级的属性
	父级构造函数.apply(this, ...)

2.父级的方法
	a.子级.prototype=父级.prototype;		×
		引用

	b.for in					×
		instanceof

	c.new 父级()					√
		父级要准备好，有可能没有参数

3.重写子级方法的时候：
	永远先执行一下父级的方法，然后再做子级的事

------------------------------------------------------------------------------------------------

面向对象――用的不多

------------------------------------------------------------------------------------------------

避免重名：
1.封闭空间
2.命名空间
3.面向对象
4.模块化		√

------------------------------------------------------------------------------------------------

bds=bds||{};
bds.se=bds.se||{};
bds.comm=bds.comm||{};

------------------------------------------------------------------------------------------------

sea.js
1.太多script标签――乱
2.依赖――麻烦

sea.js帮你引入js的
1.用到谁，引入谁――动态引入
2.自动解决依赖

------------------------------------------------------------------------------------------------

www环境――ajax

JavaScript――缺乏模块机制――补充

------------------------------------------------------------------------------------------------

http://www.seajs.org/

------------------------------------------------------------------------------------------------

模块化：
1.定义模块
2.引入模块

模块――js文件

------------------------------------------------------------------------------------------------

网络――异步――回调函数

------------------------------------------------------------------------------------------------

use		引入模块		html->模块
require		引入模块		模块->模块

------------------------------------------------------------------------------------------------

sea.js

------------------------------------------------------------------------------------------------

MVC――分

分工、分离

1.后台――
2.前台――
3.编辑――

------------------------------------------------------------------------------------------------

<ul>
	<li>浏览次数：<{$count}></li>
</ul>

------------------------------------------------------------------------------------------------

js的MVC：
数据+表现

数据、表现――分离

------------------------------------------------------------------------------------------------

MVC：
M	Model		模型――数据
V	View		视图――表现
C	Control		控制――业务逻辑

三层

------------------------------------------------------------------------------------------------

耦合度：越低越好

------------------------------------------------------------------------------------------------

var json={a: 12};
var json={"a": 12};

------------------------------------------------------------------------------------------------

58

	----------------公共讨论接口-------------------
	1.注册
			?a=reg&user=用户名&pass=密码&face=头像ID&cb=xxx
			{err: 0, msg: "注册成功"}
	
	2.登录
			?a=lgn&user=用户名&pass=密码&cb=xxx
			{err: 0, msg: "登录成功", face: 头像ID, login_time: 上次登录时间, token: "token"}
	
	3.发言
			?a=snd_msg&content=内容&token=&cb=xxx
			{err: 0, time: 发布时间, ID: 消息ID}
	
	4.完整获取
			?a=get_msg&token=&cb=xxx
			{err: 0, data: [{ID: 消息ID, post_time: 消息时间,content: 消息内容,username: 发言用户},...]}
	
	5.退出登录
			?a=logout&token=&cb=xxx
			{err: 0, msg: "成功退出登录"}
	
	6.获取用户列表
			?a=get_user_list&token=&cb=xxx
			{err: 0, data: [{ID: 用户ID,username: 用户名,face: 用户头像}]}
	
	7.获取更新
			?a=get_msg_n&n=消息ID&token=&cb=xxx
			{err: 0, data: [{ID:'1',post_time:'1364873875',content:'asdfsdf',face:'1',username:'test',to:'发给谁'},...]}
			关于消息ID：
				“n=消息ID”指的是：已接收过的消息中，最大的“消息ID”，换句话说：get_msg_n命令，返回的是ID比n大的信息，从而不用获取以前的重复消息
	
	----------------私聊部分接口----------------
	1.发送好友请求
			?a=v2_send_friend_quest&token=&to_user=用户名
			{err: 0, msg: "已经发送请求，等待接受"}
	
	2.获取好友请求
			?a=v2_get_friend_quest&token=
			{err: 0, data: [{from: 用户名, time: 发起时间}]}
	
	3.同意好友请求
			?a=v2_acc_friend_quest&to_user=用户名&token=
			{err: 0, msg: "成功"}
	
	4.拒绝好友请求
			?a=v2_ref_friend_quest&to_user=用户名&token=
			{err: 0, msg: "成功"}
	
	5.获取好友列表
			?a=v2_get_friend_list&token=
			{err: 0, data: [{user: 用户名, face: 用户头像, online: 在线状态}]}
	
	6.删除好友
			?a=v2_del_friend&to_user=用户名&token=
			{err: 0, msg: "成功"}
	
	7.发消息给好友
			?a=v2_send_msg&to_user=用户名&content=内容&token=
			{err: 0, msg: "成功"}
			
	8.接收好友消息
			?a=v2_get_msg&token=
			{err: 0, data: [{user: 用户名, post_time: 发送时间, content: 消息内容}]}
			
			**注意：和QQ一样，本系统不保留历史消息，发送给客户端后，服务器即删除消息
	
	9.发送抖屏给好友
			?a=v2_snd_shake&user=发给谁&token=
			{err: 0, msg: "成功"}
			
	10.接收抖屏信息
			?a=v2_get_shake&token=
			{err: 0, data: [{from: 谁发的}]}

------------------------------------------------------------------------------------------------

问题：
1.自动登录――安全性
2.第三方登录――

token――令牌



c0bjFoNFprdVd2eVdzNzZrWG1QUnpOaFlvcEVtUUt1S0l4allrNk9ObDVhMTlUQVFBQUFBJCQAAAAAAAAAAAEAAAADd80ARGFuY2luZ0JsdWUAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAHneN1N53jdTVH














